Sections:
00: "CODE" (0-312)


Source: "bios.asm"
                            	     1: ; Very simple cpm68k bios
                            	     2: ; Malcolm Harrow August 2023
                            	     3: 
                            	     4: ; TO DO
                            	     5: ; Change start positions of ram disks in read
                            	     6: ; sort out org instruction
                            	     7: ; Change MEMRGN
                            	     8: ; Change disk parameter tables
                            	     9: 
                            	    10: 
                            	    11: ; 7/29/17, fork from rev 3 of TinyBIOS for Tiny68000
                            	    12: ; This BIOS assumes CPM15000 will be loaded
                            	    13: ; It also assume the disk is reside in flash from location $420000 to $5FFFFF
                            	    14: ; The disk already contains CP/M 68K distribution files
                            	    15: 
                            	    16: 
                            	    17: _ccp     equ $150BC                     ; hard location for _ccp of CPM15000.SR
                            	    18: 
                            	    19: _init::    
00:00000000 21FC0000000C008C	    20:     move.l  #TRAPHNDL,$8c               ; set up trap #3 handler
00:00000008 7000            	    21:     clr.l   D0                          ; log on disk A, user 0
00:0000000A 4E75            	    22:     rts
                            	    23: 
                            	    24: TRAPHNDL:
00:0000000C 0C400017        	    25:     cmpi    #23,D0                      ; Function call in range ?
00:00000010 640A            	    26:     bcc     TRAPNG
                            	    27: 
                            	    28:  ;   move.l  D0,D5
                            	    29:  ;   move.l  D1,D6
                            	    30:  ;   and.l   #$ffff,D0
                            	    31:  ;   add.b   #65,D0
                            	    32:  ;   move.l  D0,D1
                            	    33:  ;   clr.l   D0
                            	    34:  ;   jsr     CONOUT
                            	    35:  ;   move.l  D5,D0
                            	    36:  ;   move.l  D6,D1
                            	    37:     
                            	    38: 
00:00000012 D080            	    39:     add.l   D0,D0                       ; Multiply FC...
00:00000014 D080            	    40:     add.l   D0,D0                       ; ... by 4...
00:00000016 207B0006        	    41:     move.l  BIOSBASE(PC,D0),A0          ; ... and calc offset into table...
00:0000001A 4E90            	    42:     jsr     (A0)                        ; ... then jump there
                            	    43: 
                            	    44: TRAPNG:
00:0000001C 4E73            	    45:     rte
                            	    46: 
                            	    47: BIOSBASE:
00:0000001E 00000000        	    48:     dc.l    _init
00:00000022 0000007A        	    49:     dc.l    WBOOT
00:00000026 00000080        	    50:     dc.l    CONSTAT
00:0000002A 0000008A        	    51:     dc.l    CONIN
00:0000002E 00000098        	    52:     dc.l    CONOUT
00:00000032 0000009E        	    53:     dc.l    LSTOUT
00:00000036 0000009E        	    54:     dc.l    PUN
00:0000003A 0000009E        	    55:     dc.l    RDR
00:0000003E 000000A8        	    56:     dc.l    HOME
00:00000042 000000B0        	    57:     dc.l    SELDSK
00:00000046 000000BE        	    58:     dc.l    SETTRK
00:0000004A 000000C6        	    59:     dc.l    SETSEC
00:0000004E 000000D2        	    60:     dc.l    SETDMA
00:00000052 000000DA        	    61:     dc.l    READ
00:00000056 0000010C        	    62:     dc.l    WRITE
00:0000005A 000000A2        	    63:     dc.l    LISTST
00:0000005E 000000CE        	    64:     dc.l    SECTRAN
00:00000062 000000D2        	    65:     dc.l    SETDMA
00:00000066 0000012A        	    66:     dc.l    GETSEG
00:0000006A 0000009E        	    67:     dc.l    GETIOB
00:0000006E 0000009E        	    68:     dc.l    SETIOB
00:00000072 00000126        	    69:     dc.l    FLUSH
00:00000076 00000132        	    70:     dc.l    SETEXC
                            	    71: 
                            	    72: 
                            	    73: WBOOT:  
00:0000007A 4EF9000150BC    	    74:     jmp   _ccp
                            	    75: 
                            	    76: CONSTAT: 
                            	    77: ; Check for keyboard input. Set d0 to 1 if keyboard input is pending, otherwise set to 0.
00:00000080 7007            	    78:     move.l #7,D0                        ; use EASy68k trap 15 task 7
00:00000082 4E4F            	    79:     trap   #15                          ; d1.b = 1 if keyboard ready, otherwise = 0
00:00000084 7000            	    80:     clr.l  D0
00:00000086 1001            	    81:     move.b D1,D0
00:00000088 4E75            	    82:     rts
                            	    83:          
                            	    84: CONIN:    
                            	    85: ; Read single ASCII character from the keyboard into d0
                            	    86: ; Rosco implementation of this trap waits for input
00:0000008A 7005            	    87:     move.l #5,D0                        ; use EASy68k trap 15 task 5
00:0000008C 4E4F            	    88:     trap   #15                          ; d1.b contains the ascii character
00:0000008E 1001            	    89:     move.b D1,D0      
00:00000090 C0BC0000007F    	    90:     and.l  #$7f,D0                      ; only use 7 bit character set
00:00000096 4E75            	    91:     rts
                            	    92: 
                            	    93: CONOUT: 
                            	    94: ; Display single ASCII character in d1
00:00000098 7006            	    95:     move.l #6,D0                        ; use EASy68k trap 15 task 6
00:0000009A 4E4F            	    96:     trap   #15
00:0000009C 4E75            	    97:     rts                                 ; and exit
                            	    98: 
                            	    99: LSTOUT:    
                            	   100: PUN:
                            	   101: RDR:
                            	   102: GETIOB:
                            	   103: SETIOB:
00:0000009E 7000            	   104:     clr.l  D0                            ; HACK ?
00:000000A0 4E75            	   105:     rts
                            	   106: 
                            	   107: LISTST:    
00:000000A2 103C00FF        	   108:     move.b #$ff,D0
00:000000A6 4E75            	   109:     rts
                            	   110: 
                            	   111: HOME:    
00:000000A8 427900000154    	   112:     clr.w  TRACK
00:000000AE 4E75            	   113:     rts
                            	   114: 
                            	   115: SELDSK:    
                            	   116: ; always assume one drive
00:000000B0 42390000014E    	   117:     move.b  #0,SELDRV
00:000000B6 203C00000168    	   118:     move.l  #DPH0,D0
00:000000BC 4E75            	   119:     rts
                            	   120: 
                            	   121: SETTRK:    
00:000000BE 33C100000154    	   122:     move.w  D1,TRACK
                            	   123: 
                            	   124: 
                            	   125:     ;clr.l   D1
                            	   126:     ;move.w  TRACK,D1
                            	   127:     ;add.l   #97,D1
                            	   128:     ;clr.l   D0
                            	   129:     ;jsr     CONOUT
                            	   130: 
00:000000C4 4E75            	   131:     rts
                            	   132: 
                            	   133: SETSEC:    
00:000000C6 33C100000156    	   134:     move.w  D1,SECTOR
                            	   135: 
                            	   136:     ;clr.l   D1
                            	   137:     ;move.w  SECTOR,D1
                            	   138:     ;add.l   #97,D1
                            	   139:     ;clr.l   D0
                            	   140:     ;jsr     CONOUT
                            	   141: 
00:000000CC 4E75            	   142:     rts
                            	   143: 
                            	   144: SECTRAN:
                            	   145: ;    no sector translate, put d1 into d0 and return
00:000000CE 3001            	   146:     move.w  D1,D0
00:000000D0 4E75            	   147:     rts
                            	   148: 
                            	   149: SETDMA:
00:000000D2 23C100000158    	   150:     move.l  D1,DMA
00:000000D8 4E75            	   151:     rts
                            	   152: 
                            	   153: READ:
                            	   154: ; Read one sector from requested disk, track, sector to dma address
                            	   155: ; One small drive possible as loaded at 0x2000 and CPM starts at 0x15000
                            	   156: ; This gives a max ram disk size of ~77k
                            	   157: 
00:000000DA 610A            	   158:     bsr     SETUPRD                      ; translate track/sector values into RAM loc
                            	   159: RAMDRVR:
00:000000DC 22D8            	   160:     move.l (A0)+,(A1)+
00:000000DE 51CAFFFC        	   161:     dbra   D2,RAMDRVR
                            	   162: 
00:000000E2 7000            	   163:     clr.l  D0                            ; return OK status         
00:000000E4 4E75            	   164:     rts         
                            	   165: 
                            	   166: SETUPRD:
                            	   167: ; translate track/sector into RAM location on the RAM drive
                            	   168: 
                            	   169:     ;clr.l   D1
                            	   170:     ;move.w  TRACK,D1
                            	   171:     ;add.l   #65,D1
                            	   172:     ;clr.l   D0
                            	   173:     ;jsr     CONOUT
                            	   174: 
                            	   175:     ;clr.l   D1
                            	   176:     ;move.w  SECTOR,D1
                            	   177:     ;add.l   #65,D1
                            	   178:     ;clr.l   D0
                            	   179:     ;jsr     CONOUT
                            	   180: 
00:000000E6 7000            	   181:     clr.l  D0
00:000000E8 303A006A        	   182:     move.w TRACK,D0
00:000000EC E188            	   183:     lsl.l  #8,D0
00:000000EE E988            	   184:     lsl.l  #4,D0
00:000000F0 7400            	   185:     clr.l  D2
00:000000F2 343A0062        	   186:     move.w SECTOR,D2
00:000000F6 EF8A            	   187:     lsl.l  #7,D2
00:000000F8 D082            	   188:     add.l  D2,D0
00:000000FA D0BC000C0000    	   189:     add.l  #$C0000,D0                    ; add base address of RAM drive
00:00000100 2040            	   190:     move.l D0,A0                         ; point to the track/sector in RAM drive
00:00000102 227A0054        	   191:     move.l DMA,A1                        ; get dma
00:00000106 343C001F        	   192:     move.w #(128/4)-1,D2                 ; long word move 128 bytes of sector data
00:0000010A 4E75            	   193:     rts
                            	   194: 
                            	   195: WRITE:
                            	   196: ; Write one sector to requested disk, track, sector from dma address
                            	   197: ; Both drive A & B are RAM drive
00:0000010C 0C3900020000014E	   198:     cmp.b  #2,SELDRV                     ; only drive C can be written
00:00000114 660C            	   199:     bne    WRBAD
00:00000116 61CE            	   200:     bsr    SETUPRD                       ; translate track/sector values into RAM loc
                            	   201: RAMDRVW:
00:00000118 20D9            	   202:     move.l (A1)+,(A0)+
00:0000011A 51CAFFFC        	   203:     dbra   D2,RAMDRVW
                            	   204: 
00:0000011E 7000            	   205:     clr.l  D0
00:00000120 4E75            	   206:     rts         
                            	   207: WRBAD:
00:00000122 70FF            	   208:     move.l #-1,D0
00:00000124 4E75            	   209:     rts
                            	   210: 
                            	   211: FLUSH:
00:00000126 7000            	   212:     clr.l  D0                            ; return successful
00:00000128 4E75            	   213:     rts
                            	   214: 
                            	   215: GETSEG:
00:0000012A 203C0000015E    	   216:     move.l #MEMRGN,D0                    ; return address of mem region table
00:00000130 4E75            	   217:     rts
                            	   218: 
                            	   219: SETEXC:
00:00000132 0281000000FF    	   220:     andi.l  #$ff,D1                      ; do only for exceptions 0 - 255
00:00000138 0C41002F        	   221:     cmpi    #47,D1
00:0000013C 670E            	   222:     beq     NOSET                        ; this BIOS doesn't set Trap 15
00:0000013E 0C410009        	   223:     cmpi    #9,D1                        ; or Trace
00:00000142 6708            	   224:     beq     NOSET
00:00000144 E549            	   225:     lsl     #2,D1                        ; multiply exception nmbr by 4
00:00000146 2041            	   226:     movea.l D1,A0
00:00000148 2010            	   227:     move.l  (A0),D0                      ; return old vector value
00:0000014A 2082            	   228:     move.l  D2,(A0)                      ; insert new vector
                            	   229: 
                            	   230: NOSET:    
00:0000014C 4E75            	   231:     rts
                            	   232: 
                            	   233: * ************************************************************************** *
                            	   234: ; Data
                            	   235: * ************************************************************************** *
                            	   236: 
                            	   237:               even                       ; DMA must be at even address
00:0000014E FF              	   238: SELDRV        dc.b        $ff            ; drive requested by seldsk
00:0000014F 00              	   239: RESV          dc.b        0              ; reserve byte, padding
00:00000150 FFFFFFFF        	   240: CURCFSECT     dc.l        -1             ; current CF sector, the 512 bytes data of curtrk is in sectCF
00:00000154 0000            	   241: TRACK         dc.w        0              ; track requested by settrk
00:00000156 0000            	   242: SECTOR        dc.w        0              ; max sector value is 0x3FF
00:00000158 00000000        	   243: DMA           dc.l        0
00:0000015C 00              	   244: SELCODE       dc.b        0              ; reserve byte
00:0000015D 00              	   245: RESV1         dc.b        0              ; reserve byte, padding
                            	   246: 
                            	   247: ; memory table must start on an even address
                            	   248:               even
00:0000015E 0001            	   249: MEMRGN        dc.w        1              ; 1 memory region
00:00000160 0001C000        	   250:               dc.l        $1C000         ; right after the CP/M 
00:00000164 000A0000        	   251: 			  dc.l        $A0000         ; 540K bytes, more than enough for bootstrapping  
                            	   252: 
                            	   253: ; disk parameter header
                            	   254: DPH0:    
00:00000168 00000000        	   255:     dc.l      0                          ; no sector translation table
00:0000016C 0000            	   256:     dc.w      0                          ; dummy
00:0000016E 0000            	   257:     dc.w      0
00:00000170 0000            	   258:     dc.w      0
00:00000172 00000192        	   259:     dc.l      DIRBUF                     ; ptr to directory buffer
00:00000176 00000182        	   260:     dc.l      DPB0                       ; ptr to disk parameter block
00:0000017A 00000000        	   261:     dc.l      0                          ; permanent drive, no check vector
00:0000017E 00000212        	   262:     dc.l      ALV0                       ; ptr to allocation vector
                            	   263: 
                            	   264: DPB0:    
00:00000182 0020            	   265:     dc.w     32                          ; 32 sectors per track
00:00000184 04              	   266:     dc.b     4                           ; block shift for BLS of 2048
00:00000185 0F              	   267:     dc.b     15                          ; block mask for BLS of 2048
00:00000186 00              	   268:     dc.b     0                           ; extent mask, EXM
00:00000187 00              	   269:     dc.b     0                           ; dummy fill
00:00000188 07FF            	   270:     dc.w     2047                        ; DSM, (3 tracks * 1024 sectors * 128 bytes /2048)-1
                            	   271:                            
00:0000018A 00FF            	   272:     dc.w     255                         ; DRM, 256 directory entries
00:0000018C 0000            	   273:     dc.w     0                           ; directory mask
00:0000018E 0000            	   274:     dc.w     0                           ; permanent mounted drive, check size is zero
00:00000190 0000            	   275:     dc.w     0                           ; no track offset
                            	   276: 
                            	   277: ;diskdef 4mb-hd-0
                            	   278: ;  seclen 128
                            	   279: ;  tracks 1024
                            	   280: ;  sectrk 32
                            	   281: ;  blocksize 2048
                            	   282: ;  maxdir 256
                            	   283: ;  skew 1
                            	   284: ;  boottrk 0
                            	   285: ;  os 2.2
                            	   286: ;end
                            	   287: 
                            	   288: DIRBUF:    
00:00000192 00              	   289:     ds.b     128                         ; directory buffer
00:00000193 *
                            	   290: 
                            	   291: ALV0:    
00:00000212 00              	   292: 	ds.b     256                         ; allocation vector, DSM/8+1 = 128
00:00000213 *


Symbols by name:
ALV0                            00:00000212
BIOSBASE                        00:0000001E
CONIN                           00:0000008A
CONOUT                          00:00000098
CONSTAT                         00:00000080
CURCFSECT                       00:00000150
DIRBUF                          00:00000192
DMA                             00:00000158
DPB0                            00:00000182
DPH0                            00:00000168
FLUSH                           00:00000126
GETIOB                          00:0000009E
GETSEG                          00:0000012A
HOME                            00:000000A8
LISTST                          00:000000A2
LSTOUT                          00:0000009E
MEMRGN                          00:0000015E
NOSET                           00:0000014C
PUN                             00:0000009E
RAMDRVR                         00:000000DC
RAMDRVW                         00:00000118
RDR                             00:0000009E
READ                            00:000000DA
RESV                            00:0000014F
RESV1                           00:0000015D
SECTOR                          00:00000156
SECTRAN                         00:000000CE
SELCODE                         00:0000015C
SELDRV                          00:0000014E
SELDSK                          00:000000B0
SETDMA                          00:000000D2
SETEXC                          00:00000132
SETIOB                          00:0000009E
SETSEC                          00:000000C6
SETTRK                          00:000000BE
SETUPRD                         00:000000E6
TRACK                           00:00000154
TRAPHNDL                        00:0000000C
TRAPNG                          00:0000001C
WBOOT                           00:0000007A
WRBAD                           00:00000122
WRITE                           00:0000010C
_ccp                             E:000150BC
_init                           00:00000000 EXP

Symbols by value:
00000000 _init
0000000C TRAPHNDL
0000001C TRAPNG
0000001E BIOSBASE
0000007A WBOOT
00000080 CONSTAT
0000008A CONIN
00000098 CONOUT
0000009E LSTOUT
0000009E SETIOB
0000009E RDR
0000009E PUN
0000009E GETIOB
000000A2 LISTST
000000A8 HOME
000000B0 SELDSK
000000BE SETTRK
000000C6 SETSEC
000000CE SECTRAN
000000D2 SETDMA
000000DA READ
000000DC RAMDRVR
000000E6 SETUPRD
0000010C WRITE
00000118 RAMDRVW
00000122 WRBAD
00000126 FLUSH
0000012A GETSEG
00000132 SETEXC
0000014C NOSET
0000014E SELDRV
0000014F RESV
00000150 CURCFSECT
00000154 TRACK
00000156 SECTOR
00000158 DMA
0000015C SELCODE
0000015D RESV1
0000015E MEMRGN
00000168 DPH0
00000182 DPB0
00000192 DIRBUF
00000212 ALV0
000150BC _ccp
